[1mdiff --git a/src/comments/__pycache__/forms.cpython-36.pyc b/src/comments/__pycache__/forms.cpython-36.pyc[m
[1mindex 51b9e65..02a27e4 100644[m
Binary files a/src/comments/__pycache__/forms.cpython-36.pyc and b/src/comments/__pycache__/forms.cpython-36.pyc differ
[1mdiff --git a/src/comments/__pycache__/models.cpython-36.pyc b/src/comments/__pycache__/models.cpython-36.pyc[m
[1mindex c1cef6b..ba7d81b 100644[m
Binary files a/src/comments/__pycache__/models.cpython-36.pyc and b/src/comments/__pycache__/models.cpython-36.pyc differ
[1mdiff --git a/src/comments/__pycache__/urls.cpython-36.pyc b/src/comments/__pycache__/urls.cpython-36.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..e2e31ad[m
Binary files /dev/null and b/src/comments/__pycache__/urls.cpython-36.pyc differ
[1mdiff --git a/src/comments/__pycache__/views.cpython-36.pyc b/src/comments/__pycache__/views.cpython-36.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..7e3bc9f[m
Binary files /dev/null and b/src/comments/__pycache__/views.cpython-36.pyc differ
[1mdiff --git a/src/comments/migrations/0003_auto_20190328_1355.py b/src/comments/migrations/0003_auto_20190328_1355.py[m
[1mnew file mode 100644[m
[1mindex 0000000..4bedde2[m
[1m--- /dev/null[m
[1m+++ b/src/comments/migrations/0003_auto_20190328_1355.py[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m# Generated by Django 2.1.7 on 2019-03-28 13:55[m
[32m+[m
[32m+[m[32mfrom django.db import migrations, models[m
[32m+[m[32mimport django.db.models.deletion[m
[32m+[m
[32m+[m
[32m+[m[32mclass Migration(migrations.Migration):[m
[32m+[m
[32m+[m[32m    dependencies = [[m
[32m+[m[32m        ('comments', '0002_auto_20190326_1646'),[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    operations = [[m
[32m+[m[32m        migrations.AlterModelOptions([m
[32m+[m[32m            name='comment',[m
[32m+[m[32m            options={'ordering': ['-timestamp']},[m
[32m+[m[32m        ),[m
[32m+[m[32m        migrations.AddField([m
[32m+[m[32m            model_name='comment',[m
[32m+[m[32m            name='parent',[m
[32m+[m[32m            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='comments.Comment'),[m
[32m+[m[32m        ),[m
[32m+[m[32m    ][m
[1mdiff --git a/src/comments/migrations/__pycache__/0003_auto_20190328_1355.cpython-36.pyc b/src/comments/migrations/__pycache__/0003_auto_20190328_1355.cpython-36.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..b65f62e[m
Binary files /dev/null and b/src/comments/migrations/__pycache__/0003_auto_20190328_1355.cpython-36.pyc differ
[1mdiff --git a/src/comments/models.py b/src/comments/models.py[m
[1mindex 5b7027e..6f9df5c 100644[m
[1m--- a/src/comments/models.py[m
[1m+++ b/src/comments/models.py[m
[36m@@ -4,10 +4,13 @@[m [mfrom django.contrib.contenttypes.fields import GenericForeignKey[m
 from django.contrib.contenttypes.models import ContentType[m
 [m
 class CommentManager(models.Manager):[m
[32m+[m[32m    def all(self):[m
[32m+[m[32m        qs = super(CommentManager,self).filter(parent = None)[m
[32m+[m[32m        return qs[m
     def filter_by_instance(self,instance):[m
         content_type  = ContentType.objects.get_for_model(instance.__class__)[m
         object_id = instance.id[m
[31m-        qs = super(CommentManager,self).filter(content_type = content_type, object_id = object_id)[m
[32m+[m[32m        qs = super(CommentManager,self).filter(content_type = content_type, object_id = object_id).filter(parent = None)[m
         return qs[m
 class Comment(models.Model):[m
     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)[m
[36m@@ -15,11 +18,19 @@[m [mclass Comment(models.Model):[m
     content_type = models.ForeignKey(ContentType,on_delete=models.CASCADE, null = True)[m
     object_id = models.PositiveIntegerField(null=True)[m
     content_object = GenericForeignKey('content_type','object_id')[m
[31m-[m
[32m+[m[32m    parent = models.ForeignKey('self',null = True, blank = True,on_delete = models.CASCADE)[m
     comentText = models.TextField()[m
     timestamp = models.DateTimeField(auto_now_add=True)[m
     objects = CommentManager()[m
[32m+[m
     def __str__(self):[m
         return str(self.user.username)[m
     class Meta:[m
         ordering = ['-timestamp'][m
[32m+[m[32m    def childrens(self):[m
[32m+[m[32m        return Comment.objects.filter(parent = self)[m
[32m+[m[32m    @property[m
[32m+[m[32m    def isParent(self):[m
[32m+[m[32m        if self.parent is not None:[m
[32m+[m[32m            return False[m
[32m+[m[32m        return True[m
[1mdiff --git a/src/comments/urls.py b/src/comments/urls.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6277981[m
[1m--- /dev/null[m
[1m+++ b/src/comments/urls.py[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m"""web_blog URL Configuration[m
[32m+[m
[32m+[m[32mThe `urlpatterns` list routes URLs to views. For more information please see:[m
[32m+[m[32m    https://docs.djangoproject.com/en/2.1/topics/http/urls/[m
[32m+[m[32mExamples:[m
[32m+[m[32mFunction views[m
[32m+[m[32m    1. Add an import:  from my_app import views[m
[32m+[m[32m    2. Add a URL to urlpatterns:  path('', views.home, name='home')[m
[32m+[m[32mClass-based views[m
[32m+[m[32m    1. Add an import:  from other_app.views import Home[m
[32m+[m[32m    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')[m
[32m+[m[32mIncluding another URLconf[m
[32m+[m[32m    1. Import the include() function: from django.urls import include, path[m
[32m+[m[32m    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))[m
[32m+[m[32m"""[m
[32m+[m[32mfrom django.contrib import admin[m
[32m+[m[32mfrom django.urls import path, include[m
[32m+[m[32mfrom .views import comment_thread[m
[32m+[m[32mapp_name = 'comment'[m
[32m+[m
[32m+[m[32murlpatterns = [[m
[32m+[m[32m    path('<int:abc>/',comment_thread, name='thread'),[m
[32m+[m[32m    # path('<int:pk>/delete', views.post_delete, name='post-delete'),[m
[32m+[m[32m][m
\ No newline at end of file[m
[1mdiff --git a/src/comments/views.py b/src/comments/views.py[m
[1mindex 91ea44a..a331d49 100644[m
[1m--- a/src/comments/views.py[m
[1m+++ b/src/comments/views.py[m
[36m@@ -1,3 +1,45 @@[m
 from django.shortcuts import render[m
[31m-[m
[32m+[m[32mfrom django.shortcuts import get_object_or_404[m
[32m+[m[32mfrom .models import Comment[m
[32m+[m[32mfrom django.contrib.contenttypes.models import ContentType[m
[32m+[m[32mfrom django.http import HttpResponseRedirect[m
[32m+[m[32mfrom .forms import CommentForm[m
 # Create your views here.[m
[32m+[m[32mdef comment_thread(request,abc):[m
[32m+[m[32m    obj = get_object_or_404(Comment, id = abc)[m
[32m+[m[32m    initial_data = {[m
[32m+[m[32m        'content_type':[m
[32m+[m[32m        ''[m
[32m+[m[32m    }[m
[32m+[m[32m    comment_form = CommentForm(request.POST or None)[m
[32m+[m[32m    if comment_form.is_valid():[m
[32m+[m[32m        # if the form is valid the getting the content_type from the comment_form[m
[32m+[m[32m        # getting the object id from the comment_form[m
[32m+[m[32m        # getting the content from the comment_form[m
[32m+[m[32m        # form that data from form creating the whole comment (Comment model)[m[41m [m
[32m+[m[32m        c_type = comment_form.cleaned_data.get('content_type')[m
[32m+[m[32m        obj_id = comment_form.cleaned_data.get('object_id')[m
[32m+[m[32m        content_type = ContentType.objects.get(model=c_type)[m
[32m+[m[32m        content_data = comment_form.cleaned_data.get('content')[m
[32m+[m[32m        parent_obj = None[m
[32m+[m[32m        try:[m
[32m+[m[32m            parent_id = int(request.POST.get('parent_id'))[m
[32m+[m[32m        except:[m
[32m+[m[32m            parent_id = None[m
[32m+[m[32m        if parent_id:[m
[32m+[m[32m            parent_qs = Comment.objects.filter(id = parent_id)[m
[32m+[m[32m            if parent_qs.exists() and parent_qs.count() == 1:[m
[32m+[m[32m                parent_obj = parent_qs.first()[m
[32m+[m[41m       [m
[32m+[m[32m        new_comment,created = Comment.objects.get_or_create([m
[32m+[m[32m            user = request.user,[m
[32m+[m[32m            content_type = content_type,[m
[32m+[m[32m            object_id = obj_id,[m
[32m+[m[32m            comentText=content_data,[m
[32m+[m[32m            parent = parent_obj[m
[32m+[m[32m            )[m
[32m+[m[32m    context = {[m
[32m+[m[32m        'comment':obj,[m
[32m+[m[32m        'comment_form':comment_form,[m
[32m+[m[32m    }[m
[32m+[m[32m    return render(request,'comment_thread.html',context)[m
[1mdiff --git a/src/db.sqlite3 b/src/db.sqlite3[m
[1mindex 53937f0..41532d2 100644[m
Binary files a/src/db.sqlite3 and b/src/db.sqlite3 differ
[1mdiff --git a/src/posts/__pycache__/urls.cpython-36.pyc b/src/posts/__pycache__/urls.cpython-36.pyc[m
[1mindex 10d049f..751d3c2 100644[m
Binary files a/src/posts/__pycache__/urls.cpython-36.pyc and b/src/posts/__pycache__/urls.cpython-36.pyc differ
[1mdiff --git a/src/posts/__pycache__/views.cpython-36.pyc b/src/posts/__pycache__/views.cpython-36.pyc[m
[1mindex 77b45df..5fabb47 100644[m
Binary files a/src/posts/__pycache__/views.cpython-36.pyc and b/src/posts/__pycache__/views.cpython-36.pyc differ
[1mdiff --git a/src/posts/urls.py b/src/posts/urls.py[m
[1mindex e272a0b..4ec06a0 100644[m
[1m--- a/src/posts/urls.py[m
[1m+++ b/src/posts/urls.py[m
[36m@@ -16,7 +16,6 @@[m [mIncluding another URLconf[m
 from django.contrib import admin[m
 from django.urls import path, include[m
 from . import views[m
[31m-appname = 'posts'[m
 urlpatterns = [[m
     path('', views.post_list, name='post-list'),[m
     path('new/', views.post_create, name='post-create'),[m
[1mdiff --git a/src/posts/views.py b/src/posts/views.py[m
[1mindex e090629..21c6b33 100644[m
[1m--- a/src/posts/views.py[m
[1m+++ b/src/posts/views.py[m
[36m@@ -14,7 +14,7 @@[m [mfrom comments.forms import CommentForm[m
 # This View is used to create the post[m
 # @param request This is common for all views and is used because in[m
 # web we use request to do almost every thing like http Get Request and post request[m
[31m-# this method use the form that is created in forms.py to form a post and then save it[m
[32m+[m[32m# this method use the form  that is created in forms.py to form a post and then save it[m
 # if it is valid[m
 [m
 [m
[36m@@ -55,16 +55,27 @@[m [mdef post_detail(request, pk=None):[m
         # if the form is valid the getting the content_type from the comment_form[m
         # getting the object id from the comment_form[m
         # getting the content from the comment_form[m
[31m-        # from that data from form creating the whole comment (Comment model) [m
[32m+[m[32m        # form that data from form creating the whole comment (Comment model)[m[41m [m
         c_type = comment_form.cleaned_data.get('content_type')[m
         obj_id = comment_form.cleaned_data.get('object_id')[m
         content_type = ContentType.objects.get(model=c_type)[m
         content_data = comment_form.cleaned_data.get('content')[m
[32m+[m[32m        parent_obj = None[m
[32m+[m[32m        try:[m
[32m+[m[32m            parent_id = int(request.POST.get('parent_id'))[m
[32m+[m[32m        except:[m
[32m+[m[32m            parent_id = None[m
[32m+[m[32m        if parent_id:[m
[32m+[m[32m            parent_qs = Comment.objects.filter(id = parent_id)[m
[32m+[m[32m            if parent_qs.exists() and parent_qs.count() == 1:[m
[32m+[m[32m                parent_obj = parent_qs.first()[m
[32m+[m[41m       [m
         new_comment,created = Comment.objects.get_or_create([m
             user = request.user,[m
             content_type = content_type,[m
             object_id = obj_id,[m
[31m-            comentText=content_data[m
[32m+[m[32m            comentText=content_data,[m
[32m+[m[32m            parent = parent_obj[m
             )[m
         return HttpResponseRedirect(new_comment.content_object.get_absolute_url())[m
     context = {[m
[1mdiff --git a/src/templates/base.html b/src/templates/base.html[m
[1mindex e9f2b5c..8fbbfb3 100644[m
[1m--- a/src/templates/base.html[m
[1m+++ b/src/templates/base.html[m
[36m@@ -32,16 +32,15 @@[m
       integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="[m
       crossorigin="anonymous"[m
     ></script>[m
[31m-    <script[m
[31m-      src="https://code.jquery.com/jquery-3.3.1.slim.min.js"[m
[31m-      integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"[m
[31m-      crossorigin="anonymous"[m
[31m-    ></script>[m
[31m-    <script[m
[31m-      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"[m
[31m-      integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"[m
[31m-      crossorigin="anonymous"[m
[31m-    ></script>[m
[32m+[m[32m    <script type="text/javascript">[m
[32m+[m[32m      $("img").addClass("img-fluid");[m
[32m+[m[41m          [m
[32m+[m[32m          $("img").addClass("img-fluid");[m
[32m+[m[32m          $(".comment-reply-btn").click(function(event){[m
[32m+[m[32m            event.preventDefault();[m
[32m+[m[32m            $(this).parent().next(".comment-reply").fadeToggle();[m
[32m+[m[32m          });[m
[32m+[m[32m        </script>[m
     [m
   </body>[m
 </html>[m
[1mdiff --git a/src/templates/comment_thread.html b/src/templates/comment_thread.html[m
[1mnew file mode 100644[m
[1mindex 0000000..13d0ea2[m
[1m--- /dev/null[m
[1m+++ b/src/templates/comment_thread.html[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m{% extends "base.html" %}[m[41m [m
[32m+[m[32m{% load crispy_forms_tags %}[m
[32m+[m[32m{% load markdown_deux_tags %} {% block content %}[m
[32m+[m[32m<div class="col-sm-6  card  mt-5 mb-5 pt-2 pb-2 pr-2 pl-2col-sm-offset-3">[m
[32m+[m[32m        {{comment.comentText }}[m
[32m+[m[32m    <footer class="blockquote-footer">via {{ comment.user }}| {{comment.timestamp|timesince }} ago[m[41m [m
[32m+[m[32m      {% if comment.childrens.count > 0 %} {{ comment.childrens.count }} Comments | {% endif %}</footer>[m
[32m+[m[32m      <hr/>[m
[32m+[m[32m    <div class="comment-reply">[m
[32m+[m[32m      {% for child_comment in comment.childrens %}[m
[32m+[m[32m      <blockquote class="blockquote">[m
[32m+[m[32m        <p class="blockquote">{{child_comment.comentText }}</p>[m
[32m+[m[32m     <footer class="blockquote-footer">via {{ child_comment.user }}| {{child_comment.timestamp|timesince }} ago</footer>[m
[32m+[m[32m    </blockquote>[m
[32m+[m[32m    {% endfor %}[m
[32m+[m[32m  <form action="." method="POST">[m
[32m+[m[32m      {% csrf_token %}[m
[32m+[m[32m      {{ comment_form|crispy }}[m
[32m+[m[32m      <input type="hidden"  name="parent_id" value="{{ comment.id }}">[m
[32m+[m[32m      <input type="submit" value="Reply ">[m
[32m+[m[32m    </form>[m
[32m+[m[32m    <hr/>[m
[32m+[m[32m</div>[m
[32m+[m[32m</div>[m
[32m+[m[32m{% endblock content %}[m
[1mdiff --git a/src/templates/post_detail.html b/src/templates/post_detail.html[m
[1mindex 4f3f8cc..c541c8f 100644[m
[1m--- a/src/templates/post_detail.html[m
[1m+++ b/src/templates/post_detail.html[m
[36m@@ -50,62 +50,29 @@[m
     [m
         </form>[m
       {% for comment in comments %}[m
[31m-        <div class="container">[m
[31m-            <div class="dialogbox">[m
[31m-              <div class="body">[m
[31m-                <span class="tip tip-up"></span>[m
[31m-                  <blockquote>{{comment.comentText }}</blockquote>[m
 [m
[31m-          <footer class="blockquote-footer">via {{ comment.user }}| {{comment.timestamp|timesince }}</cite></footer>[m
[31m-                </div>[m
[31m-              </div>[m
[31m-            </div>[m
[31m-      {% endfor %}[m
[31m-      <style>[m
[31m-      .tip {[m
[31m-  width: 0px;[m
[31m-  height: 0px;[m
[31m-  position: absolute;[m
[31m-  background: transparent;[m
[31m-  border: 10px solid #ccc;[m
[31m-}[m
[31m-[m
[31m-.tip-up {[m
[31m-  top: -25px; /* Same as body margin top + border */[m
[31m-  left: 10px;[m
[31m-  border-right-color: transparent;[m
[31m-  border-left-color: transparent;[m
[31m-  border-top-color: transparent;[m
[31m-}[m
[31m-.dialogbox .body {[m
[31m-  position: relative;[m
[31m-  max-width: 300px;[m
[31m-  height: auto;[m
[31m-  margin: 20px 10px;[m
[31m-  padding: 5px;[m
[31m-  background-color: #DADADA;[m
[31m-  border-radius: 3px;[m
[31m-  border: 5px solid #ccc;[m
[31m-}[m
[32m+[m[32m        <blockquote class="blockquote">{{comment.comentText }}[m
[32m+[m[32m        <footer class="blockquote-footer">via {{ comment.user }}| {{comment.timestamp|timesince }} ago[m[41m [m
[32m+[m[32m          {% if comment.childrens.count > 0 %} {{ comment.childrens.count }} Comments | {% endif %}[m
[32m+[m[32m          <a class="comment-reply-btn" href="#">Reply</a> </footer>[m
[32m+[m[32m        <div class="comment-reply" style="display: none">[m
[32m+[m[32m          {% for child_comment in comment.childrens %}[m
[32m+[m[32m          <blockquote class="blockquote">{{child_comment.comentText }}[m
[32m+[m[32m         <footer class="blockquote-footer">via {{ child_comment.user }}| {{child_comment.timestamp|timesince }} ago</footer>[m
[32m+[m[32m        </blockquote>[m
[32m+[m[32m        {% endfor %}[m
[32m+[m[32m      <form action="." method="POST">[m
[32m+[m[32m          {% csrf_token %}[m
[32m+[m[32m          {{ comment_form|crispy }}[m
[32m+[m[32m          <input type="hidden"  name="parent_id" value="{{ comment.id }}">[m
[32m+[m[32m          <input type="submit" value="Reply ">[m
[32m+[m[32m        </form>[m
 [m
[31m-.body .message {[m
[31m-  min-height: 30px;[m
[31m-  border-radius: 3px;[m
[31m-  font-family: Arial;[m
[31m-  font-size: 14px;[m
[31m-  line-height: 1.5;[m
[31m-  color: #797979;[m
[31m-}[m
[31m-      </style>[m
[32m+[m[32m        </blockquote>[m
[32m+[m[32m        <hr/>[m
     </div>[m
[31m-    <script[m
[31m-      src="http://code.jquery.com/jquery-3.3.1.min.js"[m
[31m-      integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="[m
[31m-      crossorigin="anonymous"[m
[31m-    ></script>[m
[31m-    <script type="text/javascript">[m
[31m-      $("img").addClass("img-fluid");[m
[31m-    </script>[m
[32m+[m[32m      {% endfor %}[m
[32m+[m[41m  [m
   </div>[m
 </div>[m
 {% endblock content %}[m
[1mdiff --git a/src/web_blog/__pycache__/urls.cpython-36.pyc b/src/web_blog/__pycache__/urls.cpython-36.pyc[m
[1mindex 5d6484d..a107da7 100644[m
Binary files a/src/web_blog/__pycache__/urls.cpython-36.pyc and b/src/web_blog/__pycache__/urls.cpython-36.pyc differ
[1mdiff --git a/src/web_blog/urls.py b/src/web_blog/urls.py[m
[1mindex 6060f5b..b7e54e2 100644[m
[1m--- a/src/web_blog/urls.py[m
[1m+++ b/src/web_blog/urls.py[m
[36m@@ -20,6 +20,7 @@[m [mfrom django.conf.urls.static import static[m
 urlpatterns = [[m
     path('admin/', admin.site.urls),[m
     path('posts/', include('posts.urls')),[m
[32m+[m[32m    path('comments/', include('comments.urls')),[m
 ][m
 if settings.DEBUG:[m
     urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)[m
